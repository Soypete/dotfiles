set nocompatible
set spelllang=en
syntax enable
filetype plugin indent on
set tabstop=2
set shiftwidth=2
set number
set termguicolors
autocmd BufNewFile,BufRead *.csv   set filetype=csv_semicolon
autocmd BufNewFile,BufRead *.dat   set filetype=csv_pipe
" copy to global clipboard
set clipboard=unnamed

" vim plug"""
call plug#begin('~/.vim/plugged')

Plug 'liuchengxu/space-vim-dark'
Plug 'bluz71/vim-nightfly-guicolors'
Plug 'buoto/gotests-vim'
Plug 'ekalinin/dockerfile.vim'
Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
Plug 'jremmen/vim-ripgrep'
Plug 'liuchengxu/space-vim-dark'
Plug 'luochen1990/rainbow'
Plug 'mechatroner/rainbow_csv'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'rust-lang/rust.vim'
Plug 'valloric/youcompleteme' { 'do': './install.py --all' }
Plug 'wakatime/vim-wakatime'
Plug 'vim-scripts/SQLUtilities'
Plug 'nsf/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }

call plug#end()

""""" Go Bindings """""
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_fmt_command = 'goimports'
let g:go_fmt_autosave = 1
let g:go_mod_fmt_autosave = 1
let g:go_imports_autosave = 1
let g:go_term_enabled = 1
let g:go_list_type = "quickfix"
let g:go_metalinter_autosave = 1
let g:go_metalinter_enabled = ['godot', 'godox', 'gofmt', 'govet', 'revive', 'errcheck', 'deadcode', 'gosimple', 'ifeffassign', 'staticcheck', 'structcheck', 'typecheck','unused', 'varcheck', 'bodyclose', 'dogsled', 'goconst', 'gocyclo', 'importas', 'rowserrcheck', 'sqlclosecheck', 'misspell']
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1

""""" GOTESTS"""""
let g:gotests_bin = '$GOPATH/bin/gotests'

"python-mode
let g:pymode_python = 'python3'

" NerdTree
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>

" Start NERDTree and put the cursor back in the other window.
augroup nerdtree_open
	autocmd!
	autocmd VimEnter * NERDTree | wincmd p
augroup END


" Exit Vim if NERDTree is the only window remaining in the only tab.
augroup nerdtree_close
	autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
augroup END

" RUST
let g:rustfmt_autosave = 1

" Rainbow Paranetheses
let g:rainbow_active = 1 "set to 0 if you want to enable it later via :RainbowToggle

" Vimscript initialization file
colorscheme nightfly
let g:lightline = { 'colorscheme': 'nightfly' }
let g:nightflyCursorColor = 1

" Neoformat
" Enable alignment
let g:neoformat_basic_format_align = 1
" Enable tab to spaces conversion
let g:neoformat_basic_format_retab = 1
" Enable trimmming of trailing whitespace
let g:neoformat_basic_format_trim = 1
let g:neoformat_enabled_python = ['autopep8', 'yapf', 'docformatter']
let g:neoformat_enabled_json = ['jq', 'prettier']
let g:neoformat_enabled_proto = ['clang-format']
let g:neoformat_enabled_rust = ['rustfmt']
let g:neoformat_enabled_sql = ['sqlfmt', 'pg_format']
let g:neoformat_enabled_yaml = ['prettier', 'yamlfmt']
" Enable Neoformat on save
augroup fmt
	autocmd!
	autocmd BufWritePre * undojoin | Neoformat
augroup END

" yourcompleteme
let g:ycm_enable_semantic_highlighting=1
