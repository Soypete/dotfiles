set nocompatible
set spelllang=en
syntax enable
filetype plugin indent on
set tabstop=2
set shiftwidth=2
set number
set termguicolors
set scrolloff=20
autocmd BufNewFile,BufRead *.csv   set filetype=csv_semicolon
autocmd BufNewFile,BufRead *.dat   set filetype=csv_pipe
" copy to global clipboard
set clipboard=unnamed

" vim plug"""
call plug#begin('~/.vim/plugged')

Plug 'liuchengxu/space-vim-dark'
Plug 'bluz71/vim-nightfly-guicolors'
Plug 'buoto/gotests-vim'
Plug 'ekalinin/dockerfile.vim'
Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries' }
Plug 'jremmen/vim-ripgrep'
Plug 'liuchengxu/space-vim-dark'
Plug 'luochen1990/rainbow'
Plug 'mattn/vim-lsp-settings'
Plug 'mechatroner/rainbow_csv'
Plug 'nsf/gocode', { 'rtp': 'vim', 'do': '~/.vim/plugged/gocode/vim/symlink.sh' }
Plug 'nvim-lua/plenary.nvim'
Plug 'nvim-telescope/telescope.nvim', { 'tag': '0.1.8' }
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'scrooloose/nerdtree'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-commentary'
Plug 'rust-lang/rust.vim'
Plug 'wakatime/vim-wakatime'
Plug 'ziglang/zig.vim'

call plug#end()

""""" Go Bindings """""
let g:go_def_mode='gopls'
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_fields = 1
let g:go_highlight_types = 1
let g:go_highlight_operators = 1
let g:go_fmt_command = 'goimports'
let g:go_fmt_autosave = 1
let g:go_imports_autosave = 1
""" docs for gopls ""
let g:go_info_mode='gopls'
let g:go_term_enabled = 1
let g:go_list_type = "quickfix"
let g:go_metalinter_autosave = 1
let g:go_metalinter_enabled = ['godot', 'godox', 'gofmt', 'govet', 'revive', 'errcheck', 'deadcode', 'gosimple', 'ifeffassign', 'staticcheck', 'structcheck', 'typecheck','unused', 'varcheck', 'bodyclose', 'dogsled', 'goconst', 'gocyclo', 'importas', 'rowserrcheck', 'sqlclosecheck', 'misspell']
let g:go_mod_fmt_autosave = 1
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1

""""" GOTESTS"""""
let g:gotests_bin = '$GOPATH/bin/gotests'

"python-mode
let g:pymode_python = 'python3'

" NerdTree
nnoremap <leader>n :NERDTreeFocus<CR>
nnoremap <C-n> :NERDTree<CR>
nnoremap <C-t> :NERDTreeToggle<CR>
nnoremap <C-f> :NERDTreeFind<CR>
let NERDTreeShowHidden=1

" Start NERDTree and put the cursor back in the other window.
" augroup nerdtree_open
"		autocmd!
"		autocmd VimEnter * NERDTree | wincmd p
" augroup END


" Exit Vim if NERDTree is the only window remaining in the only tab.
augroup nerdtree_close
	autocmd BufEnter * if tabpagenr('$') == 1 && winnr('$') == 1 && exists('b:NERDTree') && b:NERDTree.isTabTree() | quit | endif
augroup END

" Open the existing NERDTree on each new tab.
" autocmd BufWinEnter * if &buftype != 'quickfix' && getcmdwintype() == '' | silent NERDTreeMirror | endif

" RUST
let g:rustfmt_autosave = 1

" Rainbow Paranetheses
let g:rainbow_active = 1 "set to 0 if you want to enable it later via :RainbowToggle

" Vimscript initialization file
colorscheme nightfly
let g:lightline = { 'colorscheme': 'nightfly' }
let g:nightflyCursorColor = 1

" Neoformat
" Enable alignment
let g:neoformat_basic_format_align = 1
" Enable tab to spaces conversion
let g:neoformat_basic_format_retab = 1
" Enable trimmming of trailing whitespace
let g:neoformat_basic_format_trim = 1
let g:neoformat_enabled_python = ['flake8', 'autopep8', 'yapf', 'docformatter']
let g:neoformat_enabled_json = ['jq', 'prettier']
let g:neoformat_enabled_proto = ['clang-format']
let g:neoformat_enabled_rust = ['rustfmt']
let g:neoformat_enabled_sql = ['sqlfmt', 'pg_format']
let g:neoformat_enabled_terraform = ['terraform']
let g:neoformat_enabled_yaml = ['prettier','yamlfmt']
" Enable Neoformat on save
" augroup fmt
"		autocmd!
"		autocmd BufWritePre * undojoin | Neoformat
" augroup END
" telescope
"" Find files using Telescope command-line sugar.
nnoremap <leader>ff <cmd>Telescope find_files<cr>
nnoremap <leader>fg <cmd>Telescope live_grep<cr>
nnoremap <leader>fb <cmd>Telescope buffers<cr>
nnoremap <leader>fh <cmd>Telescope help_tags<cr>

" Using Lua functions
nnoremap <leader>ff <cmd>lua require('telescope.builtin').find_files()<cr>
nnoremap <leader>fg <cmd>lua require('telescope.builtin').live_grep()<cr>
nnoremap <leader>fb <cmd>lua require('telescope.builtin').buffers()<cr>
nnoremap <leader>fh <cmd>lua require('telescope.builtin').help_tags()<cr>

" zig
let g:zig_fmt_autosave = 1

" lsp
if executable('pylsp')
    " pip install python-lsp-server
    au User lsp_setup call lsp#register_server({
        \ 'name': 'pylsp',
        \ 'cmd': {server_info->['pylsp']},
        \ 'allowlist': ['python'],
        \ })
endif

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> K <plug>(lsp-hover)
    nnoremap <buffer> <expr><c-f> lsp#scroll(+4)
    nnoremap <buffer> <expr><c-d> lsp#scroll(-4)

    let g:lsp_format_sync_timeout = 1000
    autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
    
    " refer to doc to add more commands
endfunction

augroup lsp_install
    au!
    " call s:on_lsp_buffer_enabled only for languages that has the server registered.
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" autocomplete
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"

